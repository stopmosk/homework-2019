Отношение времени работы рекурсивного алгоритма ко времени работы нерекурсивного алгоритма при разных N

Отношение времени рекурсивного и нерекурсивного алгоритмов при 1000000 попыток:
N    Отношение
1    0.7073535431933188
2    0.899276002804225
3    1.071426073313325
4    1.1797924691762733
5    1.3034492013481147
6    1.4065166751483311
7    1.4754184128353738
8    1.5519372022594713
9    1.570790468604528

Отношение времени рекурсивного и нерекурсивного алгоритмов при 100000 попыток:
N    Отношение
10   1.5794134548367191
20   1.8457762124898016
30   1.9598508441568172
40   2.047388823726712
50   2.0431549387364987
60   2.0990788964571157
70   2.037270677508771
80   2.0158591676548663
90   2.040328216739413
100  2.0595136300153656

Отношение времени рекурсивного и нерекурсивного алгоритмов при 10000 попыток:
N    Отношение
100  2.0514677580535663
200  1.8935935109450563
300  1.8243535178374255
400  1.7457588845623722
500  1.6991886374636496
600  1.57873485929691
700  1.5238172656317812
800  1.4496120701152928
900  1.4816094730012008

Вывод: Рекурсивный алгоритм всегда медленнее (кроме случаев N = 1, N = 2) нерекурсивного алгоритма.
Рекурсивный алгоритм наименее эффективен при 50 < N < 100, работая в два раза медленнее нерекурсивного.
Но при N > 100, по видимому, умножение начинает занимать больше времени, чем рекурсия, и эффективность алгоритмов
начинает выравниваться.
При N > 1000 рекурсивный алгоритм перестаёт работать из-за переполнения стека вызовов (насколько я понял).
Если бы стек не переполнялся, то при больших N оба алгоритма стали бы по скорости приблизительно одинаково эффективны.


По потреблению памяти не разобрался, но рекурсивный вариант должен хавать поболе чисто теоретически.
