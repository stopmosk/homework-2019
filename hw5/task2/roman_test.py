import unittest
from roman_class import *


class MyTestCase(unittest.TestCase):
    def test_int_to_roman(self):
        self.assertRaises(TypeError, Roman.int_to_roman, 1.5)
        self.assertRaises(TypeError, Roman.int_to_roman, 'XIX')
        self.assertRaises(ValueError, Roman.int_to_roman, -1)
        self.assertRaises(ValueError, Roman.int_to_roman, 0)
        self.assertRaises(ValueError, Roman.int_to_roman, 2000)
        self.assertEqual(Roman.int_to_roman(1), 'I')
        self.assertEqual(Roman.int_to_roman(3), 'III')
        self.assertEqual(Roman.int_to_roman(4), 'IV')
        self.assertEqual(Roman.int_to_roman(5), 'V')
        self.assertEqual(Roman.int_to_roman(6), 'VI')
        self.assertEqual(Roman.int_to_roman(8), 'VIII')
        self.assertEqual(Roman.int_to_roman(9), 'IX')
        self.assertEqual(Roman.int_to_roman(10), 'X')
        self.assertEqual(Roman.int_to_roman(11), 'XI')
        self.assertEqual(Roman.int_to_roman(13), 'XIII')
        self.assertEqual(Roman.int_to_roman(14), 'XIV')
        self.assertEqual(Roman.int_to_roman(19), 'XIX')
        self.assertEqual(Roman.int_to_roman(29), 'XXIX')
        self.assertEqual(Roman.int_to_roman(45), 'XLV')
        self.assertEqual(Roman.int_to_roman(49), 'XLIX')
        self.assertEqual(Roman.int_to_roman(50), 'L')
        self.assertEqual(Roman.int_to_roman(54), 'LIV')
        self.assertEqual(Roman.int_to_roman(59), 'LIX')
        self.assertEqual(Roman.int_to_roman(89), 'LXXXIX')
        self.assertEqual(Roman.int_to_roman(94), 'XCIV')
        self.assertEqual(Roman.int_to_roman(99), 'XCIX')
        self.assertEqual(Roman.int_to_roman(100), 'C')
        self.assertEqual(Roman.int_to_roman(110), 'CX')
        self.assertEqual(Roman.int_to_roman(111), 'CXI')
        self.assertEqual(Roman.int_to_roman(130), 'CXXX')
        self.assertEqual(Roman.int_to_roman(133), 'CXXXIII')
        self.assertEqual(Roman.int_to_roman(139), 'CXXXIX')
        self.assertEqual(Roman.int_to_roman(149), 'CXLIX')
        self.assertEqual(Roman.int_to_roman(150), 'CL')
        self.assertEqual(Roman.int_to_roman(155), 'CLV')
        self.assertEqual(Roman.int_to_roman(199), 'CXCIX')
        self.assertEqual(Roman.int_to_roman(399), 'CCCXCIX')
        self.assertEqual(Roman.int_to_roman(444), 'CDXLIV')
        self.assertEqual(Roman.int_to_roman(449), 'CDXLIX')
        self.assertEqual(Roman.int_to_roman(489), 'CDLXXXIX')
        self.assertEqual(Roman.int_to_roman(494), 'CDXCIV')
        self.assertEqual(Roman.int_to_roman(499), 'CDXCIX')
        self.assertEqual(Roman.int_to_roman(500), 'D')
        self.assertEqual(Roman.int_to_roman(550), 'DL')
        self.assertEqual(Roman.int_to_roman(555), 'DLV')
        self.assertEqual(Roman.int_to_roman(888), 'DCCCLXXXVIII')
        self.assertEqual(Roman.int_to_roman(899), 'DCCCXCIX')
        self.assertEqual(Roman.int_to_roman(939), 'CMXXXIX')
        self.assertEqual(Roman.int_to_roman(944), 'CMXLIV')
        self.assertEqual(Roman.int_to_roman(949), 'CMXLIX')
        self.assertEqual(Roman.int_to_roman(988), 'CMLXXXVIII')
        self.assertEqual(Roman.int_to_roman(989), 'CMLXXXIX')
        self.assertEqual(Roman.int_to_roman(994), 'CMXCIV')
        self.assertEqual(Roman.int_to_roman(998), 'CMXCVIII')
        self.assertEqual(Roman.int_to_roman(999), 'CMXCIX')
        self.assertEqual(Roman.int_to_roman(1000), 'M')
        self.assertEqual(Roman.int_to_roman(1488), 'MCDLXXXVIII')
        self.assertEqual(Roman.int_to_roman(1489), 'MCDLXXXIX')
        self.assertEqual(Roman.int_to_roman(1498), 'MCDXCVIII')
        self.assertEqual(Roman.int_to_roman(1499), 'MCDXCIX')
        self.assertEqual(Roman.int_to_roman(1888), 'MDCCCLXXXVIII')
        self.assertEqual(Roman.int_to_roman(1899), 'MDCCCXCIX')
        self.assertEqual(Roman.int_to_roman(1988), 'MCMLXXXVIII')
        self.assertEqual(Roman.int_to_roman(1998), 'MCMXCVIII')
        self.assertEqual(Roman.int_to_roman(1999), 'MCMXCIX')

    def test_check(self):
        self.assertRaises(TypeError, Roman.check, 1.5)
        self.assertRaises(TypeError, Roman.check, 'XIX')
        self.assertRaises(ValueError, Roman.check, -1)
        self.assertRaises(ValueError, Roman.check, 0)
        self.assertRaises(ValueError, Roman.check, 2000)

    def test_roman_init(self):
        self.assertRaises(TypeError, Roman, 1.5)
        self.assertRaises(TypeError, Roman, 'XIX')
        self.assertRaises(ValueError, Roman, -1)
        self.assertRaises(ValueError, Roman, 0)
        self.assertRaises(ValueError, Roman, 2000)
        self.assertTrue(Roman(1488).value == 1488)
        self.assertTrue(Roman(1488).text == 'MCDLXXXVIII')

    def test_eq(self):
        self.assertTrue(Roman(1) == Roman(1))
        self.assertTrue(Roman(1999) == Roman(1999))

    def test_add(self):
        self.assertRaises(ValueError, Roman.__add__, Roman(1999), Roman(500))
        self.assertRaises(ValueError, Roman.__add__, Roman(999), Roman(1999))
        self.assertTrue(Roman(1000) + Roman(500), Roman(1500))
        self.assertTrue(Roman(1) + Roman(2), Roman(3))
        self.assertTrue(Roman(1) + Roman(2) + Roman(3), Roman(6))


if __name__ == '__main__':
    unittest.main()
